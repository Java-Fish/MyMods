<?xml version="1.0" encoding="UTF-8" ?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
<xs:element name="info">
	<xs:complexType>
		<xs:sequence>
			<xs:element name="ActorInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Behavior information for colonists, enemies and animals.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Animal" type="xs:string" minOccurs="0" default="True"  >
							<xs:annotation><xs:documentation>
								Animals have less needs and inhabit barns instead of houses. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CarryPosition" type="xs:string" minOccurs="0" default="(0,0, 0,5, 0,5)"  >
							<xs:annotation><xs:documentation>
								Relative position of carried items. [UnityEngine.Vector3, default: (0,0, 0,5, 0,5)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Drinks" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Drink only a certain item (e.g. robots => oil barrel). Empty = all drinks. [System.String[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Eats" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Eats only a certain item (e.g. robots => oil barrel). Empty = all food. [System.String[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="GainsExperience" type="xs:string" minOccurs="0" default="True"  >
							<xs:annotation><xs:documentation>
								Gets better at what it does. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HerdingBehavior" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Probability (0-1) to wander towards other actors of the same type. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Names" type="xs:string" minOccurs="0" default="System.String[]"  >
							<xs:annotation><xs:documentation>
								List of possible names. Use inheritsfrom:xxx to inherit names from another type (used for backer names). [System.String[], default: System.String[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Needs" type="xs:string" minOccurs="0" default="System.String[]"  >
							<xs:annotation><xs:documentation>
								List of needs (see DataInfo/Needs). [System.String[], default: System.String[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RandomLootAmount" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								How many pieces of loot when killed? [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Speed" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Movement speed in tiles per second. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpeedMoodFactor" type="xs:string" minOccurs="0" default="0,1"  >
							<xs:annotation><xs:documentation>
								By which factor does mood affect movement speed? [System.Single, default: 0,1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TaskGroups" type="xs:string" minOccurs="0" default="System.String[]"  >
							<xs:annotation><xs:documentation>
								List of possible tasks (see DataInfo/TaskGroup). [System.String[], default: System.String[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UnarmedMeleeAttack" type="xs:string" minOccurs="0" default="5"  >
							<xs:annotation><xs:documentation>
								How much damage per punch does actor do when unarmed. [System.Int32, default: 5]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="VisionRange" type="xs:string" minOccurs="0" default="10"  >
							<xs:annotation><xs:documentation>
								How many tiles far can the actor see. [System.Int32, default: 10]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WaitAfterMovement" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								How long is the actor idle after movement. (e.g. spiders) [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="BackerRaftInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A raft carrying things from other backers. (only used internally)
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="BirdInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Birds like the seagull automatically move between Water tiles.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Height" type="xs:string" minOccurs="0" default="3"  >
							<xs:annotation><xs:documentation>
								Height above ground. [System.Single, default: 3]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Speed" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Speed in tiles per second. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="HitpointInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Things with hitpoints can get hurt and die.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="MaxHitpoints" type="xs:string" minOccurs="0" default="50"  >
							<xs:annotation><xs:documentation>
								HP when at full health. [System.Int32, default: 50]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RegenPerSecond" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Regeneration while sleeping in hp/s [System.Int32, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="PopupInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A popup is something that randomly appears in a time interval like the fish or the worms.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Interval" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Approximate time interval in seconds inbetween popups. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="RallyInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Used for the rally flag
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="RecruitingInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Used for the recruiting flag
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="RobotInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Information for robots (still needs ActorInfo).
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="StepCloudInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Spawns small particle clouds on every animation step.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="OnlyWhenRunning" type="xs:string" minOccurs="0" default="True"  >
							<xs:annotation><xs:documentation>
								Only create clouds when running. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ParticleSystemName" type="xs:string" minOccurs="0" default="StepParticleSystem"  >
							<xs:annotation><xs:documentation>
								Name of the particle system to use. [System.String, default: StepParticleSystem]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="PositionFrame0" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Relative position of cloud on frame 0. Leave at null for no cloud. [System.Nullable`1[UnityEngine.Vector3], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="PositionFrame1" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Relative position of cloud on frame 1. Leave at null for no cloud. [System.Nullable`1[UnityEngine.Vector3], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="PositionFrame2" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Relative position of cloud on frame 2. Leave at null for no cloud. [System.Nullable`1[UnityEngine.Vector3], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="PositionFrame3" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Relative position of cloud on frame 3. Leave at null for no cloud. [System.Nullable`1[UnityEngine.Vector3], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ToolInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A tool or weapon.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="BaseEffect" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								How good is the tool. Increase to base skill. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TaskType" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Type of the tool (one of Combat, Crafting, Agriculture, Mining). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="UserModInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Information about the mod.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="ModName" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name of the mod. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Priority" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Loading priority of this mod. Lower priority = loaded earlier. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Required" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Optional: Names of required other mods. [System.String[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Version" type="xs:string" minOccurs="0" default="0,1"  >
							<xs:annotation><xs:documentation>
								Version number [System.Single, default: 0,1]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="UserModAuthor" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Information about the author of the mod. You can have multiple of these in a file. (optional)
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="AuthorName" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Name/nickname of the author. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DiscordID" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Your ID on discord (optional). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Email" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Email of the author (optional). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Role" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Creator, Co-Creator etc. (optional). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SteamID" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Your ID on Steam (optional). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ClaimInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Thing that expands territory.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="BorderMarkerPrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Type of the border markers. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ClaimPriority" type="xs:string" minOccurs="0" default="5"  >
							<xs:annotation><xs:documentation>
								Claims with lower priority override claims with higher priority; [System.Int32, default: 5]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ClaimRange" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Range of influence. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IsOutpost" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Choose random color. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="DecorationInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A decoration object.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Range" type="xs:string" minOccurs="0" default="8"  >
							<xs:annotation><xs:documentation>
								Range of effect value of the object. [System.Single, default: 8]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Value" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Beauty value of the object. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="EnemyClaimInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Thing that expands territory.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="BorderMarkerPrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Type of the border markers. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ClaimPriority" type="xs:string" minOccurs="0" default="5"  >
							<xs:annotation><xs:documentation>
								Claims with lower priority override claims with higher priority; [System.Int32, default: 5]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ClaimRange" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Range of influence. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IsOutpost" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Choose random color. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="MountainInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A mountain.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="PlayerClaimInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Thing that expands territory.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="BorderMarkerPrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Type of the border markers. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ClaimPriority" type="xs:string" minOccurs="0" default="5"  >
							<xs:annotation><xs:documentation>
								Claims with lower priority override claims with higher priority; [System.Int32, default: 5]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ClaimRange" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Range of influence. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IsOutpost" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Choose random color. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="PowerLineInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A road.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="RoadInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A road.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpeedBonus" type="xs:string" minOccurs="0" default="0,2"  >
							<xs:annotation><xs:documentation>
								Relative movement speed bonus. [System.Single, default: 0,2]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="VeinInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A vein.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="BuildingInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Building specific information. Relevant for workshops etc. as well.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="EnemySpawnerInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A building that spawns enemies over time.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnInterval" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Interval inbetween spawns in seconds. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnTimeToActivate" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								How long to wait until first spawn. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnType" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								What to spawn? [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="HouseInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A house where colonists or animals live in.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="AllowAnimals" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Allow animals to use this house. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AllowColonists" type="xs:string" minOccurs="0" default="True"  >
							<xs:annotation><xs:documentation>
								Allow colonists to use this house. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DisappearWhileSleeping" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Sleeping here makes the actor disappear (to make it look like it entered this house). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Entrance" type="xs:string" minOccurs="0" default="(0,0, 0,0, 0,0)"  >
							<xs:annotation><xs:documentation>
								Relative point at which colonists enter the house. [UnityEngine.Vector3, default: (0,0, 0,0, 0,0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HousingCapacity" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								How many actors can live here. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HousingQuality" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Quality of the housing provided (1=low, 2=mid, 3=high). [System.Int32, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ProjectileInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A projectile fired from a weapon.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Damage" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Damage done by projectile when hitting an enemy. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Speed" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Speed in t/s at which projectile travels. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="SocialBuildingInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A social building like a tavern fulfills the colonists' social need.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ConveyorBeltInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A conveyor belt.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Direction" type="xs:string" minOccurs="0" default="(0,0, 0,0, 0,0)"  >
							<xs:annotation><xs:documentation>
								In which direction does it move? [UnityEngine.Vector3, default: (0,0, 0,0, 0,0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HeightIn" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Height in incoming direction. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HeightOut" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Height in outgoing direction. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IsDistributor" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Is it a distributor? (can have multiple outputs) [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Speed" type="xs:string" minOccurs="0" default="0,3333333"  >
							<xs:annotation><xs:documentation>
								How fast do elements move? [System.Single, default: 0,3333333]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ConveyorBeltModelUpdaterInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A conveyor belt.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Effect" type="xs:string" minOccurs="0" default="effects/ConveyorBeltStraight/ConveyorBeltStraight"  >
							<xs:annotation><xs:documentation>
								Name of the effect to apply [System.String, default: effects/ConveyorBeltStraight/ConveyorBeltStraight]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Height" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Height of effect. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="FilterInserterInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Inserter behavior.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="AngleExtent" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								At what angle does the arm extend per cycle? [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpot" type="xs:string" minOccurs="0" default="(0,0, 0,0, 0,0)"  >
							<xs:annotation><xs:documentation>
								Relative position of from where to grab items. [UnityEngine.Vector3, default: (0,0, 0,0, 0,0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpot" type="xs:string" minOccurs="0" default="(0,0, 0,0, 0,0)"  >
							<xs:annotation><xs:documentation>
								Relative position of to where to deliver items. [UnityEngine.Vector3, default: (0,0, 0,0, 0,0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Part1Offset" type="xs:string" minOccurs="0" default="0,375"  >
							<xs:annotation><xs:documentation>
								Position offset of inserter part 1 (base) [System.Single, default: 0,375]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Part1Prefab" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Type name of inserter part 1 (base) [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Part2Offset" type="xs:string" minOccurs="0" default="0,9583333"  >
							<xs:annotation><xs:documentation>
								Position offset of inserter part 2 (arm) [System.Single, default: 0,9583333]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Part2Prefab" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Type name of inserter part 2 (arm) [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TransportDurationFull" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Time to deliver from - to. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TransportDurationHalf" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Time to deliver from - middle or middle - to. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="InserterInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Inserter behavior.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="AngleExtent" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								At what angle does the arm extend per cycle? [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpot" type="xs:string" minOccurs="0" default="(0,0, 0,0, 0,0)"  >
							<xs:annotation><xs:documentation>
								Relative position of from where to grab items. [UnityEngine.Vector3, default: (0,0, 0,0, 0,0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpot" type="xs:string" minOccurs="0" default="(0,0, 0,0, 0,0)"  >
							<xs:annotation><xs:documentation>
								Relative position of to where to deliver items. [UnityEngine.Vector3, default: (0,0, 0,0, 0,0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Part1Offset" type="xs:string" minOccurs="0" default="0,375"  >
							<xs:annotation><xs:documentation>
								Position offset of inserter part 1 (base) [System.Single, default: 0,375]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Part1Prefab" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Type name of inserter part 1 (base) [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Part2Offset" type="xs:string" minOccurs="0" default="0,9583333"  >
							<xs:annotation><xs:documentation>
								Position offset of inserter part 2 (arm) [System.Single, default: 0,9583333]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Part2Prefab" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Type name of inserter part 2 (arm) [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TransportDurationFull" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Time to deliver from - to. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TransportDurationHalf" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Time to deliver from - middle or middle - to. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="AutoFarmInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Adds the behavior of an automated farm.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CranePrefab" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as crane. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationBase" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Base time in s. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationPerDistance" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Increment based on distance in s/m. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FramePrefab" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as frame. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Grove" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								0 for farm, 1 for grove [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HookPrefab" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as hook. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnCrane" type="xs:string" minOccurs="0" default="True"  >
							<xs:annotation><xs:documentation>
								Spawn a crane [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="StorageTiles" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								List of storage tiles, x,y, e.g. 1,1;1,2;1,3... [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="DepotInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Picker (used internally).
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CranePrefab" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as crane. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationBase" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Base time in s. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationPerDistance" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Increment based on distance in s/m. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FramePrefab" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as frame. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HookPrefab" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as hook. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnCrane" type="xs:string" minOccurs="0" default="True"  >
							<xs:annotation><xs:documentation>
								Spawn a crane [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="StorageTiles" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								List of storage tiles, x,y, e.g. 1,1;1,2;1,3... [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Type" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Type of picker (Entry, Exit or Storage). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="OverheadConveyorCartInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						An overhead conveyor cart.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HeightElevated" type="xs:string" minOccurs="0" default="0,75"  >
							<xs:annotation><xs:documentation>
								Height when raised. [System.Single, default: 0,75]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HeightLowered" type="xs:string" minOccurs="0" default="-0,125"  >
							<xs:annotation><xs:documentation>
								Height when lowered. [System.Single, default: -0,125]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HookPrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Type to use as hook. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Speed" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Speed at which the cart travels. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="VerticalSpeed" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Vertical speed of the cart. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="OverheadConveyorInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Track or station of an overhead conveyor network.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CartPrefab" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Type of the cart to spawn in this network. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Station" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Is it a station? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="PickerInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Abstract, something that can store items.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CranePrefab" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as crane. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationBase" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Base time in s. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationPerDistance" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Increment based on distance in s/m. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FramePrefab" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as frame. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HookPrefab" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as hook. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnCrane" type="xs:string" minOccurs="0" default="True"  >
							<xs:annotation><xs:documentation>
								Spawn a crane [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="StorageTiles" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								List of storage tiles, x,y, e.g. 1,1;1,2;1,3... [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="AudioInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Play an audioclip in a semi-random interval.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="ActiveWhenRaining" type="xs:string" minOccurs="0" default="True"  >
							<xs:annotation><xs:documentation>
								Play at raintime. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Ambience" type="xs:string" minOccurs="0" default="True"  >
							<xs:annotation><xs:documentation>
								Count as ambience (for volume setting). [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ClipsDaytime" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Name of the (built-in) audio clips that are to be played at daytime (comma-separated). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ClipsNighttime" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Name of the (built-in) audio clips that are to be played at nighttime (comma-separated). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Interval" type="xs:string" minOccurs="0" default="20"  >
							<xs:annotation><xs:documentation>
								Interval in seconds. [System.Single, default: 20]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnChance" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Probability to spawn this audio effect. Note: Every component and audio source costs performance. Therefore it makes sense to set this to <1 for non-critical objects like trees. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="SimpleAutoAnimationInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Information regarding the voxel model.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="DestroyAfterCycle" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Destroy after animation cycle. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Frames" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Number of frames. [System.Int32, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TimePerFrame" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								time per Frame. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="FoundationInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Info for foundations (make a tile buildable).
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="MineableInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Things that can be mined, e.g. trees
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="AttachToSoil" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Attach to underlying object, e.g. ore -> soil tile. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MinesTo" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								List of things you get from mining. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RandomLootAmount" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								List of random loot you get from mining. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnOnRemove" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Thing to spawn after last element is mined. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TimeToMine" type="xs:string" minOccurs="0" default="30"  >
							<xs:annotation><xs:documentation>
								Base time required to mine this object. [System.Int32, default: 30]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="NaturalResourceInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Things that can be mined by buildings, e.g. oil wells
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="PlantInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Thing that grows over time.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="GrowsOnTile" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Only grows on specific ground tile. Leave empty for no restriction. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="GrowthRateDay" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Growth rate at day time. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="GrowthRateNight" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Growth rate at night time. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="GrowTime" type="xs:string" minOccurs="0" default="60"  >
							<xs:annotation><xs:documentation>
								Tile until fully grown. [System.Single, default: 60]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IsCrop" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can be grown in farm. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IsTree" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can be grown in grove. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WaterUsage" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Factor of water usage. 1 = water once per plant. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="CargoShipInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Cargo ship behavior.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CargoHeight" type="xs:string" minOccurs="0" default="0,6666667"  >
							<xs:annotation><xs:documentation>
								Relative height of the cargo. [System.Single, default: 0,6666667]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Speed" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Speed of the ship. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="HarbourInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Cargo port behavior.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CranePrefab" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as crane. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationBase" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Base time in s. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationPerDistance" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Increment based on distance in s/m. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DockingPoint" type="xs:string" minOccurs="0" default="(0,0, 0,0, 0,0)"  >
							<xs:annotation><xs:documentation>
								Relative coordinate where the ship docks. [UnityEngine.Vector3, default: (0,0, 0,0, 0,0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FramePrefab" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as frame. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HookPrefab" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as hook. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnCrane" type="xs:string" minOccurs="0" default="True"  >
							<xs:annotation><xs:documentation>
								Spawn a crane [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="StorageTiles" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								List of storage tiles, x,y, e.g. 1,1;1,2;1,3... [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ShipInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Player ship.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CargoCapacity" type="xs:string" minOccurs="0" default="500"  >
							<xs:annotation><xs:documentation>
								Cargo capacity of ship. [System.Int32, default: 500]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="FarmLandInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A Farm land.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="LocomotiveInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A locomotive for a train.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Acceleration" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Acceleration force of the locomotive in t/s². [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Deacceleration" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Deceleration force of the locomotive in t/s². [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MaxSpeed" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Maximum speed of the train in t/s. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="RailwayCrossingInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A railway crossing. Closes when a train passes.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="GatePosition" type="xs:string" minOccurs="0" default="(0,0, 0,0, 0,0)"  >
							<xs:annotation><xs:documentation>
								Relative position of gate. [UnityEngine.Vector3, default: (0,0, 0,0, 0,0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="GateType" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Type to use as gate. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="SemaphoreInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A semaphore for train tracks.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="GatePosition" type="xs:string" minOccurs="0" default="(0,0, 0,0, 0,0)"  >
							<xs:annotation><xs:documentation>
								Relative position of gate. [UnityEngine.Vector3, default: (0,0, 0,0, 0,0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="GateType" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Type to use as gate. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="LookAhead" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								How many segments to look ahead (used for pre-signals). [System.Int32, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="TrackInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A track piece.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CanPlaceSemaphore" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can place a semaphore above this track. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Connections" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Relative position of two tiles which this track connects. [UnityEngine.Vector3[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Curve" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Is a curve. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Points" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Relative points along which the trains will move. [UnityEngine.Vector3[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="TrainFactoryInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Train factory.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Count" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								How many instances can be spawned? [System.Int32, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="TrainStationInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Train Station.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CranePrefab" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as crane. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationBase" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Base time in s. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationPerDistance" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Increment based on distance in s/m. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FramePrefab" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as frame. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HookPrefab" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as hook. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnCrane" type="xs:string" minOccurs="0" default="True"  >
							<xs:annotation><xs:documentation>
								Spawn a crane [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="StorageTiles" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								List of storage tiles, x,y, e.g. 1,1;1,2;1,3... [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Tracks" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								List of tiles where trains will stop, separated by ',', multiple platforms separated by 'newline' [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Type" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Type of picker (Entry, Exit or Storage). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="TrainWagonInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A wagon of a train.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Cargo" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can carry cargo. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CargoHeight" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Height of carried cargo. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="WaterSprinklerInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A water sprinkler.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Area" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Area that is sprinkled (square effect, extent in either direction). [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="VisibilityUpdaterInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Adds a visibility updater that regular checks if an object is under the fog of war.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="InverseFogOfWar" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Visible only when inside fog of war. (e.g. camp marker) [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RevealRange" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Reveal tiles around this. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="StayRevealed" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Stay revealed. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="AbstractWorkshopInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Abstract, use ManualWorkshopInfo or AutomaticWorkshopInfo instead.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="AnimationMode" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Animation during production. 0 = Frame is selected according to production progress. 1 = Frame is cycled every time the colonist hits the workshop. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Icon" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Icon to use for the workshop in the colonist management screen. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InheritRecipiesFrom" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								List of workshops from which recipes are inherited. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" minOccurs="0" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" minOccurs="0" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Priority" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Influences order in the colonist management screen. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnInputBoxes" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Spawn boxes at input places? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnOutputBoxes" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Spawn boxes at output places? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="AutomaticWorkshopInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A workshop that produces automatically given it has the required inputs.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="AnimationMode" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Animation during production. 0 = Frame is selected according to production progress. 1 = Frame is cycled every time the colonist hits the workshop. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Icon" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Icon to use for the workshop in the colonist management screen. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InheritRecipiesFrom" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								List of workshops from which recipes are inherited. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" minOccurs="0" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" minOccurs="0" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Priority" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Influences order in the colonist management screen. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnInputBoxes" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Spawn boxes at input places? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnOutputBoxes" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Spawn boxes at output places? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ManualWorkshopInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A workshop operated by your colonists.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="AnimationMode" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Animation during production. 0 = Frame is selected according to production progress. 1 = Frame is cycled every time the colonist hits the workshop. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraftingSound" type="xs:string" minOccurs="0" default="Construct"  >
							<xs:annotation><xs:documentation>
								The sound it makes when crafting. [System.String, default: Construct]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Icon" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Icon to use for the workshop in the colonist management screen. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InheritRecipiesFrom" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								List of workshops from which recipes are inherited. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" minOccurs="0" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" minOccurs="0" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Priority" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Influences order in the colonist management screen. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnInputBoxes" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Spawn boxes at input places? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnOutputBoxes" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Spawn boxes at output places? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="PowerGeneratorInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Building used to generate power.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="RecyclingWorkshopInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A workshop operated by your colonists.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="AnimationMode" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Animation during production. 0 = Frame is selected according to production progress. 1 = Frame is cycled every time the colonist hits the workshop. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraftingSound" type="xs:string" minOccurs="0" default="Construct"  >
							<xs:annotation><xs:documentation>
								The sound it makes when crafting. [System.String, default: Construct]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Icon" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Icon to use for the workshop in the colonist management screen. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InheritRecipiesFrom" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								List of workshops from which recipes are inherited. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" minOccurs="0" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" minOccurs="0" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Priority" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Influences order in the colonist management screen. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnInputBoxes" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Spawn boxes at input places? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnOutputBoxes" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Spawn boxes at output places? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="TrainingDummyInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Used by colonists to practice fighting..
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="UpgradeWorkshopInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A workshop operated by your colonists.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="AnimationMode" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Animation during production. 0 = Frame is selected according to production progress. 1 = Frame is cycled every time the colonist hits the workshop. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraftingSound" type="xs:string" minOccurs="0" default="Construct"  >
							<xs:annotation><xs:documentation>
								The sound it makes when crafting. [System.String, default: Construct]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Icon" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Icon to use for the workshop in the colonist management screen. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InheritRecipiesFrom" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								List of workshops from which recipes are inherited. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InputSpots" type="xs:string" minOccurs="0" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are input goods placed. [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutputSpots" type="xs:string" minOccurs="0" default="UnityEngine.Vector3[]"  >
							<xs:annotation><xs:documentation>
								Where are output goods created. [UnityEngine.Vector3[], default: UnityEngine.Vector3[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Priority" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Influences order in the colonist management screen. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnInputBoxes" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Spawn boxes at input places? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnOutputBoxes" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Spawn boxes at output places? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="AudioClipInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Need type. (e.g. food or drink)
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="AudioClips" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								(Internal) [System.Collections.Generic.List`1[UnityEngine.AudioClip], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BasePitch" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Base level of the pitch. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BaseVolume" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Base level of the volume (1=100%). [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="PitchVariance" type="xs:string" minOccurs="0" default="0,1"  >
							<xs:annotation><xs:documentation>
								Random variance of the pitch. [System.Single, default: 0,1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Priority" type="xs:string" minOccurs="0" default="100"  >
							<xs:annotation><xs:documentation>
								Priority (lower = more likely to play). [System.Int32, default: 100]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Source" type="xs:string" minOccurs="0" default="?"  >
							<xs:annotation><xs:documentation>
								Link to where this file is from. (Optional, in case of copyright questions) [System.String, default: ?]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Variations" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Number of variations. [System.Int32, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="VolumeVariance" type="xs:string" minOccurs="0" default="0,25"  >
							<xs:annotation><xs:documentation>
								Random variance of the volume. [System.Single, default: 0,25]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="BaseInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Basic/universal object information.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="AddCollider" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Add a collider. This will prevent colonists and other creatures from walking through this object. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AddHeightForItems" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Additional height to be added to other items on this tile. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AdditionalSpawns" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Other objects to spawn alongside (e.g. the tracks in the train station). List of ObjectType,relx,rely,relz,rot, multiple lines with one entry per line [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Faction" type="xs:string" minOccurs="0" default="Neutral"  >
							<xs:annotation><xs:documentation>
								Default faction (Player, Neutral, Enemy) [Faction, default: Neutral]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IgnoreFogOfWar" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Visible even when inside fog of war. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IgnoreTileHeight" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Always spawn at the same height regardless of the underlying tile. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InvisibleToUser" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Invisible in user interface. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IsAutoRemoveScenery" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Scenery that is automatically removed when something is built on top, e.g. a worm. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RegisterToRepository" type="xs:string" minOccurs="0" default="True"  >
							<xs:annotation><xs:documentation>
								Register in object repository. Should usually be true except for UI elements. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Selectable" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can be selected by clicking on it. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Serializable" type="xs:string" minOccurs="0" default="True"  >
							<xs:annotation><xs:documentation>
								Is saved to save file. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Size" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								How many tiles are occupied by this object in either direction. [System.Int32, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SizeWidth" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Use if a building is not square. Leave empty/as 0 if square.  [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Tier" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Tier this item belongs to. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ModelInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Information regarding the voxel model.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Alpha" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Opaqueness of the model. Note: values < 1 change the shader used to render the object and can have a performance impact if used excessively. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AnimationAutoStart" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Animation starts automatically when object is spawned, e.g. UI or scenery. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AnimationAutoSync" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Animation is synced automatically, e.g. harvest indicators. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AnimationFrames" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Number of animation frames (e.g. walking). [System.Int32, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AnimationRandomOffset" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Random time offset for animation [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AnimationSpeed" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								How many animation steps per second. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BoundingBoxExtent" type="xs:string" minOccurs="0" default="(0,0, 0,0, 0,0)"  >
							<xs:annotation><xs:documentation>
								Override the size of the bounding box (where to click to select an object). Note: This is overridden when you specify Walls. [UnityEngine.Vector3, default: (0,0, 0,0, 0,0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BuildFrames" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Number of building animation frames. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CombineMeshes" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Combine adjacent meshes. Do not use for non-static things. (used for floor tiles). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CustomMaterial" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Use special material. Used for ocean and water. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DestroyAfterAnimationCycle" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Used for UI elements. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DoNotSpawn" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Do not actually spawn (used for ocean). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DrawShadows" type="xs:string" minOccurs="0" default="True"  >
							<xs:annotation><xs:documentation>
								Catches shadows from lights. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Height" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Height at which arrows etc. are displayed. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HeightOverride" type="xs:string" minOccurs="0" default="-1"  >
							<xs:annotation><xs:documentation>
								Ignore other modifiers and set the height of this object (e.g. for tile overhangs). [System.Single, default: -1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="icon" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Icon. (generated internally) [UnityEngine.Texture2D, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MaterialID" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								ID of the material to use. (0=standard, 1=transparent) [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ModelVariations" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Number of model variations (e.g. colonists). To use this, create as many model files, e.g. xxx1.vox, xxx2.vox etc. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ModifierStack" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								ield: +-separated list of modifiers to be applied when spawning (rtx, rty, rtz, rr). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Overhang" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Is overhang between two terrain types, e.g. Floor_Dark_Lowground=Floor_Dark_MountainBase. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ScaleX" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Scale in x-dimension. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ScaleY" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Scale in y-dimension. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ScaleZ" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Scale in z-dimension. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ShowIndicationArrow" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Show an arrow when in build mode, e.g. conveyor belts. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpecialHeight" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Height of special effects. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpecialLightColor" type="xs:string" minOccurs="0" default="RGBA(0,000, 0,000, 0,000, 0,000)"  >
							<xs:annotation><xs:documentation>
								Color of special effect lights. [UnityEngine.Color, default: RGBA(0,000, 0,000, 0,000, 0,000)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpecialLightFlicker" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Flicker intensity of special effect lights. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpecialLightIntensity" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Intensity of special effect lights. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpecialLightRange" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Range of special effect lights. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpecialPrefabs" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Special effects to add. Multiple effects can be separated by ;. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TopLayerOnly" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Extract top face. Used for tiles. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="SpawnerInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Adding this to an object will cause it to be automatically spawned onto maps.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CanSpawnOnOtherItems" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Spawn on top of other objects (e.g. clay and ore). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RequireWalkable" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Only spawn where your people can go. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnClusterExtent" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								How spread apart are things in a spawn cluster. [System.Int32, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnClusterSize" type="xs:string" minOccurs="0" default="NumRange"  >
							<xs:annotation><xs:documentation>
								Number range of objects per spawn (e.g. 3:5 trees). [NumRange, default: NumRange]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnCohesive" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Spawn in clumps (e.g. rocks). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnFrequency" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Relative spawning frequency. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnLevels" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Height levels on which it can spawn. (0=ocean, 1=water, 2=sand, 3=grass, 4=soil, 5=rock) [System.Int32[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnMinimum" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Minimum number of spawns relative to map size (e.g. 0.0001). [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnMinimumTier" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Minimum tier to spawn (0 = all, 1=grassland, 2=desert, 3=dark...) [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnTiles" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Tiles types on which it can spawn. [System.String[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="NeedType" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Need type. (e.g. food or drink)
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="ActionsToSolve" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Actions to perform when need is low. [System.String[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AffectsNeutrals" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Need affects neutral animals. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="changePerMinute" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Level change per minute. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="criticalBelow" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Level it which need is considered critical (0-100). [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="icon" type="xs:string" minOccurs="0" default="Close"  >
							<xs:annotation><xs:documentation>
								Icon to use for need in UI. [System.String, default: Close]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="lowBelow" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Level it which need is considered low (0-100). [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="StartFulfillment" type="xs:string" minOccurs="0" default="80"  >
							<xs:annotation><xs:documentation>
								Fulfillment level at the start of the game (0-100). [System.Single, default: 80]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="TaskGroupInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A task group (e.g. agriculture).
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="DefaultPriority" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								1 for on by default. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="DefaultPriorityForAnimals" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								1 for on by default. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ExperienceFactor" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Multiplicator of exp gain. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Icon" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Icon to use for task group in UI. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Priority" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Relative priority (lower = higher) [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Selectable" type="xs:string" minOccurs="0" default="True"  >
							<xs:annotation><xs:documentation>
								Can be toggled on/off by player. (E.g. need fulfillment cannot be switched off). [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="DifficultyInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						How many enemy camps to spawn on this map.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Density" type="xs:string" minOccurs="0" default="1,5"  >
							<xs:annotation><xs:documentation>
								How many camps to spawn per 1000 map tiles. [System.Single, default: 1,5]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Difficulty" type="xs:string" minOccurs="0" default="50"  >
							<xs:annotation><xs:documentation>
								Base difficulty. Nearest camp will have around this as a total strength. Furthest camp will have 2x. [System.Single, default: 50]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MaxSpawns" type="xs:string" minOccurs="0" default="-1"  >
							<xs:annotation><xs:documentation>
								Maximum number of camps to spawn. (-1 to disable) [System.Int32, default: -1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MinSpawns" type="xs:string" minOccurs="0" default="-1"  >
							<xs:annotation><xs:documentation>
								Minimum number of camps to spawn. (-1 to disable) [System.Int32, default: -1]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="EnemyCampInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Information on the setup of a single enemy camp.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="EnemySpawn" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								If recruiting flag is spawned: What enemies need to be defeated  [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnTiles" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Tile types on which it can spawn. [System.String[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ToSpawn" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Things that will be spawned, e.g. 2*Pig,1*RecruitingFlag [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="SubBiomeInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Adds sub biomes, e.g. oases in deserts.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="MaxFrequency" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Frequency with which this biome is spawned (in % of tiles, e.g. 0.0005. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MinFrequency" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Frequency with which this biome is spawned (in % of tiles, e.g. 0.0005. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MinSpawns" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Minimum number of spawns [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObjectsToSpawn" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								List of objects to spawn, e.g. 3*Tree,2*Turtle [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnOn" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								On which terrain should this be spawned? [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TerrainToSpawn" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								List of terrain to spawn, e.g. 10*Floor_Water,10*Floor_Grass [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="CampaignLoadoutInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Possible loadout for the campaign.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Content" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Things to spawn (e.g. 3*SettlerFemale,3*SettlerMale,4*Pig). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="CustomSpawnInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Adds a specific custom spawn (e.g. items, monsters etc.) to the map.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="EnemySpawn" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								If recruiting flag is spawned: What enemies need to be defeated  [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Faction" type="xs:string" minOccurs="0" default="Neutral"  >
							<xs:annotation><xs:documentation>
								Faction of things in this spawn group: Player, Enemy or Neutral. [Faction, default: Neutral]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MainPlayerSpawn" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Is this the main player spawn point? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnLevels" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Height levels on which it can spawn. (0=ocean, 1=water, 2=sand, 3=grass, 4=soil, 5=rock) [System.Int32[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnTiles" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Tile types on which it can spawn. [System.String[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ToSpawn" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Things that will be spawned, e.g. 2*Pig,1*RecruitingFlag [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="DioramaContentInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A diorama description (do not edit this directly, use the diorama generator tool instead.)
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Content" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								A diorama description (do not edit this directly, use the diorama generator tool instead.) [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="RevealMapInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Reveal entire map.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ExactSpawnInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Size of the map.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Spawns" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Newline-separated list of spawns. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SuppressGenericSpawns" type="xs:string" minOccurs="0" default="True"  >
							<xs:annotation><xs:documentation>
								Suppress scenery and enemy camp spawns. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Translate" type="xs:string" minOccurs="0" default="(0,0, 0,0, 0,0)"  >
							<xs:annotation><xs:documentation>
								Translate content. [UnityEngine.Vector3, default: (0,0, 0,0, 0,0)]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="LocalizationInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Specifies how a thing is called in the game.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Content" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Newline-separated list of string assignments, e.g. ObjectType.Slime = Slime [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Language" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Language for which this block is. (You can have multiple LocalizationInfos in the same file). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="LockButtonInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						UI Buttons to lock (usually for tutorials).
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Identifiers" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								List of buttons to lock. [System.String[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="DisableRecommendationsInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Disable recommendation system.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="OverrideTargetProductionInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Override Target Production.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Target" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								New targets. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="OverrideCargoInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Override cargo with target production (usually for testing).
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="AddXPLevels" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Add XP level to all friendlies. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Colonists" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Colonists to add. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Progress" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Progression within tier. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Tier" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Tier. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="DisableNeedInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Needs to disable (usually for tutorials).
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Identifiers" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								List of needs to disable. [System.String[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="SpawnModifierInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Modify spawning amounts.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="SpawnModifiers" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								List of modifications, e.g. Tree*1.5,Rock*1.75 [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="WaveInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						An enemy wave.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Time" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								When does wave arrive in s. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ToSpawn" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								What to spawn. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="MapSizeInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Size of the map.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="MinimumHostileDistance" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								How far away from the player can enemies spawn (minimum distance)? [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Size" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Size of the map (one dimension). [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="MinimumGoodInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Minimum goods to ensure (tutorials).
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Goods" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								List of goods, e.g. 5*log,5*minedrock. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ModifierInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A map modifier controls the map generation process or adds objectives and goals.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="AutoSpawn" type="xs:string" minOccurs="0" default="True"  >
							<xs:annotation><xs:documentation>
								Automatically add one of this group to every map? [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Description" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Description key. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Group" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Group of this modifier. Only one modifier of a given group can be active at the same time (e.g. map size) [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="GroupDefault" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Is default of given group. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="GroupIndex" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Order in which group items are placed. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="GroupIsMandatory" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								A map needs to have one of these. (e.g. map size) [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="GroupIsMultichoice" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								A map can have multiple from this group [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Icon" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Icon to use in UI. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IntroText" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Name of the introductory text key. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnOnRandomMaps" type="xs:string" minOccurs="0" default="True"  >
							<xs:annotation><xs:documentation>
								Spawns on random maps. (vs. only when selected manually on the custom map screen) [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Visible" type="xs:string" minOccurs="0" default="True"  >
							<xs:annotation><xs:documentation>
								Visible in the custom map screen. [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ScenarioInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A fixed scenario consisting of multiple modifiers.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Description" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Description string. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Icon" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Icon to show in UI. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MapSeed" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Seed of the map. Leave at 0 for random seed. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Modifiers" type="xs:string" minOccurs="0" default="System.String[]"  >
							<xs:annotation><xs:documentation>
								List of modifiers. [System.String[], default: System.String[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Number" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Number of scenario (for sorting in UI). [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Tutorial" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Is tutorial? For metrics and inclusion in tutorial menu. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ShaderInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Controls different shader effects.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="AmbientOcclusionIntensity" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Intensity of the ambient occlusion effect. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="AmbientOcclusionRadius" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Radius of the ambient occlusion effect. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BloomIntensity" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Intensity of the bloom effect. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="BloomThreshold" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Brightness threshold for the bloom effect. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="EnvironmentParticleColor" type="xs:string" minOccurs="0" default="RGBA(0,000, 0,000, 0,000, 0,000)"  >
							<xs:annotation><xs:documentation>
								Color of the little environment blocks. [UnityEngine.Color, default: RGBA(0,000, 0,000, 0,000, 0,000)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FogDay" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Intensity of fog/haze at day. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FogNight" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Intensity of fog/haze at night. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FogPreset" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Name of the fog preset. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RainDuration" type="xs:string" minOccurs="0" default="50"  >
							<xs:annotation><xs:documentation>
								Duration of rain. [System.Single, default: 50]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RainTimeBetween" type="xs:string" minOccurs="0" default="500"  >
							<xs:annotation><xs:documentation>
								Time between rain. [System.Single, default: 500]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RainTimeBetweenLightning" type="xs:string" minOccurs="0" default="8"  >
							<xs:annotation><xs:documentation>
								Average time between lightning. [System.Single, default: 8]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RainTransitionTime" type="xs:string" minOccurs="0" default="10"  >
							<xs:annotation><xs:documentation>
								Time to transition between rain and no rain. [System.Single, default: 10]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="VoidRadius" type="xs:string" minOccurs="0" default="52"  >
							<xs:annotation><xs:documentation>
								Fog void radius around camera. [System.Single, default: 52]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="TerrainInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Adds a terrain type to the game.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="ambiencetrackcenter" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Audio track to be played at the center of the map. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ColorLogisticsConnection" type="xs:string" minOccurs="0" default="RGBA(0,200, 0,650, 0,850, 1,000)"  >
							<xs:annotation><xs:documentation>
								Color of UI arrow: Logistics Connection. [UnityEngine.Color, default: RGBA(0,200, 0,650, 0,850, 1,000)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ColorSettlerActiveTask" type="xs:string" minOccurs="0" default="RGBA(0,000, 1,000, 0,000, 1,000)"  >
							<xs:annotation><xs:documentation>
								Color of UI arrow: Set Task. [UnityEngine.Color, default: RGBA(0,000, 1,000, 0,000, 1,000)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ColorStockpileConnection" type="xs:string" minOccurs="0" default="RGBA(0,850, 0,850, 0,000, 1,000)"  >
							<xs:annotation><xs:documentation>
								Color of UI arrow: Stockpile Connection. [UnityEngine.Color, default: RGBA(0,850, 0,850, 0,000, 1,000)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FloorByHeight" type="xs:string" minOccurs="0" default="System.String[]"  >
							<xs:annotation><xs:documentation>
								List of 6 different floor type names by height, e.g. Floor_Ocean,Floor_Water,Floor_Sand,Floor_Grass,Floor_Earth,Floor_Earth. [System.String[], default: System.String[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="PositionInWorld" type="xs:string" minOccurs="0" default="System.Single[]"  >
							<xs:annotation><xs:documentation>
								Position of this terrain type on the world map, e.g. 0.5,0.5 [System.Single[], default: System.Single[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Seed" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Fixed seed of the map. Leave empty for random seed. [System.Nullable`1[System.Int32], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnDensity" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								What percentage of the tiles will spawn things? [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TerrainFrequencies" type="xs:string" minOccurs="0" default="System.Single[]"  >
							<xs:annotation><xs:documentation>
								Relative frequency of the 6 floog types, e.g. 0.6,0.1,0.15,0.4,0.1,0 [System.Single[], default: System.Single[]]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Tier" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Indication of the difficulty of this terrain. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="TerrainModifierInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Change the realtive frequency of the different terrain types.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="TerrainFrequencyModifiers" type="xs:string" minOccurs="0" default="System.Single[]"  >
							<xs:annotation><xs:documentation>
								List of 6 numbers for each terrain type. E.g. 1,1,1,1,2,2 for extra mountains. [System.Single[], default: System.Single[]]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ObjectiveGroupInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A group of objectives (e.g. setup a workshop). 
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Bonus" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Optional objective group, can complete map without doing this. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Description" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Description string of this objective group. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="GroupID" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								ID of this group (use in related ObjectiveInfos). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IntroText" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								String to display on loading screen. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="OutroText" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								String to display when objective group is complete. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TutorialNum" type="xs:string" minOccurs="0" default="-1"  >
							<xs:annotation><xs:documentation>
								Number of this tutorial. Leave at -1 if no tutorial. [System.Int32, default: -1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="UnlockButtons" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Buttons to unlock when this group begins. [System.String[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WaitFor" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Wait for group with this id befor beginning this group. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WaitForSeconds" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Wait for x seconds before showing this group.  [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ObjectiveInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						An objective to be used for an objective group.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="GroupID" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								ID of the group it belongs to. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Object2ID" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Depending on objective: object 2 ID [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObjectID" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Depending on objective: object ID [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObjectType" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Depending on objective: object type [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Target" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Depending on objective: target [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="TaskGroup" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Depending on objective: task group [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Type" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Type of this objective.  [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="BuildingRecipeInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Things that can be built.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="BuildAbove" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Build above resource (o.g. oil well). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CanBuildOnAllSolidGround" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can be built on sand and other solid tiles. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CanBuildOutsideTerritory" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can be built outside of your territory, e.g. outpost bonfires. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HarborPlacement" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Building placement like harbors. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Ingredients" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								List of items needed to build it. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="InstaBuild" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Is built instantly (e.g. roads). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="MultiBuild" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Colonists can build multiple instances in one go. [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RecommendationBase" type="xs:string" minOccurs="0" default="0,4"  >
							<xs:annotation><xs:documentation>
								Base count of this building that will be recommended. 0 to disable in recommentations. [System.Single, default: 0,4]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RecommendationFactor" type="xs:string" minOccurs="0" default="0,02"  >
							<xs:annotation><xs:documentation>
								Proportion with which this building is recommended. 0 to disable in recommentations. [System.Single, default: 0,02]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RequireFertileGround" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can only be built on fertile tiles. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ToggleBuild" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Building twice removes previous instance. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ItemInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Things that can be produced/mined.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="IsAvailableOnAllTiers" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can be produced or mined on all biomes. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IsDrink" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can be drunk. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="IsFood" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can be eaten. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RecommendationBase" type="xs:string" minOccurs="0" default="10"  >
							<xs:annotation><xs:documentation>
								Base count of this item that will be recommended. 0 to disable in recommentations. [System.Single, default: 10]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RecommendationFactor" type="xs:string" minOccurs="0" default="0,05"  >
							<xs:annotation><xs:documentation>
								Proportion with which this item is recommended. 0 to disable in recommentations. [System.Single, default: 0,05]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="StackCount" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								How many of this item can be stacked in one tile. [System.Int32, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="StackDist" type="xs:string" minOccurs="0" default="2,5"  >
							<xs:annotation><xs:documentation>
								Stacking: horizontal distance between stached items. [System.Single, default: 2,5]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="StackHeight" type="xs:string" minOccurs="0" default="3,25"  >
							<xs:annotation><xs:documentation>
								Stacking: vertical distance between stacked items. [System.Single, default: 3,25]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="StackType" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Stacking: Cross, Beside, EndlessStack or Pyramid. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Weight" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								How heavy is an item. (Decreases colonist speed while carrying.) Should be 0.5 (light), 1 (normal) or 2 (heavy) [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="TileInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Info for floor tiles.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="BuildableGround" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can build normal buildings here. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ChildHeight" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Height of every item/building on this tile. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Fertile" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can build farms here. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FixedRotation" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Fixed rotation (otherwise random). [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Level" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Height level (0-1 = ocean/water, 2=sand, 3 = grass/main, 4-5=mountains) [System.Int32, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SolidGround" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can place items here and build things like bonfires. [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnOnTop" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Items to always spawn on top, e.g. earth -> mountain). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Walkable" type="xs:string" minOccurs="0" default="True"  >
							<xs:annotation><xs:documentation>
								Can actors walk here? [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Wanderable" type="xs:string" minOccurs="0" default="True"  >
							<xs:annotation><xs:documentation>
								Will actors wander here? [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WMColor" type="xs:string" minOccurs="0" default="RGBA(0,000, 0,000, 0,000, 1,000)"  >
							<xs:annotation><xs:documentation>
								Color of the tile on the world map [UnityEngine.Color, default: RGBA(0,000, 0,000, 0,000, 1,000)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WMHeight" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								Height of the tile on the world map [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="WMScenery" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Scenery block for the world map, frequency,color,height,width [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="WorkshopRecipeInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Recipes for workshops.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Inputs" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								List of items needed to build it. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Outputs" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								Output generated by this recipe. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ProductionTime" type="xs:string" minOccurs="0" default="15"  >
							<xs:annotation><xs:documentation>
								Base time required to build this. [System.Int32, default: 15]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Workshops" type="xs:string" default=""  >
							<xs:annotation><xs:documentation>
								List of workshops where it can be built. Leave empty for farm produce etc.  [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="WindInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Add to make item affected by wind.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="CarriageInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Adds a zeppelin controller.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CarryPosition" type="xs:string" minOccurs="0" default="(0,0, 0,0, 0,0)"  >
							<xs:annotation><xs:documentation>
								Relative position at which carried goods are displayed. [UnityEngine.Vector3, default: (0,0, 0,0, 0,0)]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="RotationSpeed" type="xs:string" minOccurs="0" default="180"  >
							<xs:annotation><xs:documentation>
								Rotation speed in degrees per second. [System.Single, default: 180]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Speed" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Travel speed of this carriage. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="CarriageStationInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A station inbetween zeppelins can travel. 
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CarriageType" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Type to spawn as carriage. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CranePrefab" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as crane. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationBase" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Base time in s. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationPerDistance" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Increment based on distance in s/m. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FramePrefab" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as frame. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FreeCarriages" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Number of free carriages to spawn. [System.Int32, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HookPrefab" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as hook. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnCrane" type="xs:string" minOccurs="0" default="True"  >
							<xs:annotation><xs:documentation>
								Spawn a crane [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="StorageTiles" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								List of storage tiles, x,y, e.g. 1,1;1,2;1,3... [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Type" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Type of picker (Entry, Exit or Storage). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ZeppelinInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Adds a zeppelin controller.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Acceleration" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Acceleration in t/m². [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Altitude" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Travel altitude. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Resistance" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								Wind resistance. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ZeppelinDepotInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A zeppelin factory - produces zeppelins when spawned.
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ZeppelinCount" type="xs:string" minOccurs="0" default="3"  >
							<xs:annotation><xs:documentation>
								Number of zeppelins to spawn. [System.Int32, default: 3]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ZeppelinStationInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						A station inbetween zeppelins can travel. 
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CanOverlap" type="xs:string" minOccurs="0" default="False"  >
							<xs:annotation><xs:documentation>
								Can it be placed on top of other buildings? [System.Boolean, default: False]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Category" type="xs:string" minOccurs="0" default="None"  >
							<xs:annotation><xs:documentation>
								Under which category in the build menu it will show up. [System.String, default: None]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CranePrefab" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as crane. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationBase" type="xs:string" minOccurs="0" default="1"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Base time in s. [System.Single, default: 1]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="CraneTransportDurationPerDistance" type="xs:string" minOccurs="0" default="0"  >
							<xs:annotation><xs:documentation>
								How long does a transport take? Increment based on distance in s/m. [System.Single, default: 0]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="FramePrefab" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as frame. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="HookPrefab" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Name of type to use as hook. [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="ObstacleMap" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Matrix of where colonists can go and what they should avoid. 0=no penalty, 9=avoid; separated by newline and , [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SettlerInteractionSpots" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								SettlerInteractionSpots are where your colonists go to, for example, sit on a table. The format is X,Y,Z and then rotation X,Y,Z - Multiple spots are separated by ; [PositionAndRotation[], default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="SpawnCrane" type="xs:string" minOccurs="0" default="True"  >
							<xs:annotation><xs:documentation>
								Spawn a crane [System.Boolean, default: True]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="StorageTiles" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								List of storage tiles, x,y, e.g. 1,1;1,2;1,3... [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
						<xs:element name="Type" type="xs:string" minOccurs="0" default=""  >
							<xs:annotation><xs:documentation>
								Type of picker (Entry, Exit or Storage). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ZoneInfo" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation><xs:documentation>
						Zone info (only used internally).
					</xs:documentation></xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="fencePrefab" type="xs:string" minOccurs="0"  >
							<xs:annotation><xs:documentation>
								Zone fence prefab (only used internally). [System.String, default: ]
							</xs:documentation></xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
</xs:element>
